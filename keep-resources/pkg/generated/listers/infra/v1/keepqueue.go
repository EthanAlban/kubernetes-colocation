/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/keep-resources/pkg/apis/infra/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KeepQueueLister helps list KeepQueues.
// All objects returned here must be treated as read-only.
type KeepQueueLister interface {
	// List lists all KeepQueues in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KeepQueue, err error)
	// KeepQueues returns an object that can list and get KeepQueues.
	KeepQueues(namespace string) KeepQueueNamespaceLister
	KeepQueueListerExpansion
}

// keepQueueLister implements the KeepQueueLister interface.
type keepQueueLister struct {
	indexer cache.Indexer
}

// NewKeepQueueLister returns a new KeepQueueLister.
func NewKeepQueueLister(indexer cache.Indexer) KeepQueueLister {
	return &keepQueueLister{indexer: indexer}
}

// List lists all KeepQueues in the indexer.
func (s *keepQueueLister) List(selector labels.Selector) (ret []*v1.KeepQueue, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KeepQueue))
	})
	return ret, err
}

// KeepQueues returns an object that can list and get KeepQueues.
func (s *keepQueueLister) KeepQueues(namespace string) KeepQueueNamespaceLister {
	return keepQueueNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KeepQueueNamespaceLister helps list and get KeepQueues.
// All objects returned here must be treated as read-only.
type KeepQueueNamespaceLister interface {
	// List lists all KeepQueues in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KeepQueue, err error)
	// Get retrieves the KeepQueue from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.KeepQueue, error)
	KeepQueueNamespaceListerExpansion
}

// keepQueueNamespaceLister implements the KeepQueueNamespaceLister
// interface.
type keepQueueNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KeepQueues in the indexer for a given namespace.
func (s keepQueueNamespaceLister) List(selector labels.Selector) (ret []*v1.KeepQueue, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KeepQueue))
	})
	return ret, err
}

// Get retrieves the KeepQueue from the indexer for a given namespace and name.
func (s keepQueueNamespaceLister) Get(name string) (*v1.KeepQueue, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("keepqueue"), name)
	}
	return obj.(*v1.KeepQueue), nil
}
